{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/constants.js","src/scripts/TableColumn.js","src/scripts/TableRow.js","src/utils.js","src/modules/GameController.class.js","src/modules/GameMovement.class.js","src/scripts/toggleGameMode.js"],"sourcesContent":["const $0fcf5b2da988d5d1$export$b373aa48c5dd97cc = 2048;\nconst $0fcf5b2da988d5d1$export$c21b640bfee1f50e = 0;\nconst $0fcf5b2da988d5d1$export$25512e653c44f0a8 = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nconst $0fcf5b2da988d5d1$export$6333daccc0bdbd7c = {\n    left: \"left\",\n    right: \"right\",\n    up: \"up\",\n    down: \"down\"\n};\nconst $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8 = {\n    start: \"start\",\n    restart: \"restart\"\n};\nconst $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40 = {\n    idle: \"idle\",\n    playing: \"playing\",\n    win: \"win\",\n    lose: \"lose\"\n};\nconst $0fcf5b2da988d5d1$export$7a24a077d7a1fcef = {\n    up: \"ArrowUp\",\n    down: \"ArrowDown\",\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\"\n};\nconst $0fcf5b2da988d5d1$export$fe523e4c05d25308 = 4;\n\n\nconst $6ecaa24ec68734a7$var$TableColumn = (className)=>{\n    const td = document.createElement(\"td\");\n    td.classList.add(className);\n    return td;\n};\nvar $6ecaa24ec68734a7$export$2e2bcd8739ae039 = $6ecaa24ec68734a7$var$TableColumn;\n\n\nconst $764498523289c9f6$var$TableRow = (className)=>{\n    const tr = document.createElement(\"tr\");\n    tr.classList.add(className);\n    return tr;\n};\nvar $764498523289c9f6$export$2e2bcd8739ae039 = $764498523289c9f6$var$TableRow;\n\n\n/* eslint-disable no-param-reassign */ \nconst $5542fe962866e08d$export$33e0efaee94597c9 = (maxNumber)=>{\n    return Math.floor(Math.random() * maxNumber);\n};\nconst $5542fe962866e08d$export$9a00dee1beb8f576 = (str)=>{\n    return str[0].toUpperCase() + str.slice(1);\n};\nconst $5542fe962866e08d$export$36748765b520fa8d = ()=>{\n    const result = Math.floor(Math.random() * 10) + 1;\n    return result === 1;\n};\nconst $5542fe962866e08d$export$28da6a8e130cf651 = (board)=>{\n    return board.every((row)=>row.every((cell)=>cell !== (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e)));\n};\nconst $5542fe962866e08d$export$e2f06fda9dc3fd04 = (board)=>{\n    return board.some((row)=>row.some((cell)=>cell === (0, $0fcf5b2da988d5d1$export$b373aa48c5dd97cc)));\n};\n\n\n\nclass $df08e06b5ece57d3$var$GameController {\n    constructor(game){\n        this.game = game;\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.setController();\n    }\n    setController() {\n        document.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n    removeController() {\n        document.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n    handleKeyDown(e) {\n        if (this.game.getStatus() === (0, $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40).idle) return;\n        const oldBoard = JSON.stringify(this.game.getState());\n        this.game.showStatus();\n        switch(e.key){\n            case (0, $0fcf5b2da988d5d1$export$7a24a077d7a1fcef).up:\n                this.game.moveUp();\n                break;\n            case (0, $0fcf5b2da988d5d1$export$7a24a077d7a1fcef).down:\n                this.game.moveDown();\n                break;\n            case (0, $0fcf5b2da988d5d1$export$7a24a077d7a1fcef).left:\n                this.game.moveLeft();\n                break;\n            case (0, $0fcf5b2da988d5d1$export$7a24a077d7a1fcef).right:\n                this.game.moveRight();\n                break;\n        }\n        const newBoard = JSON.stringify(this.game.getState());\n        if (newBoard !== oldBoard) {\n            this.game.createNewCell();\n            this.game.updateBoard(this.game.getState());\n        }\n    }\n}\nvar $df08e06b5ece57d3$export$2e2bcd8739ae039 = $df08e06b5ece57d3$var$GameController;\n\n\nclass $c900fb13af697397$var$GameMovement {\n    isMoveLeft(currentBoard) {\n        for(let grid = currentBoard.length - 1; grid >= 0; grid--)for(let cell = currentBoard.length - 1; cell >= 0; cell--){\n            if (currentBoard[grid][cell - 1] === currentBoard[grid][cell]) return true;\n        }\n        return false;\n    }\n    isMoveRight(currentBoard) {\n        for(let grid = 0; grid < currentBoard.length; grid++)for(let cell = 0; cell < currentBoard.length; cell++){\n            if (currentBoard[grid][cell] === currentBoard[grid][cell + 1]) return true;\n        }\n        return false;\n    }\n    isMoveUp(currentBoard) {\n        for(let grid = currentBoard.length - 1; grid >= 1; grid--)for(let cell = currentBoard.length - 1; cell >= 0; cell--){\n            if (currentBoard[grid][cell] === currentBoard[grid - 1][cell]) return true;\n        }\n        return false;\n    }\n    isMoveDown(currentBoard) {\n        for(let grid = 0; grid < currentBoard.length - 1; grid++)for(let cell = 0; cell < currentBoard.length; cell++){\n            if (currentBoard[grid][cell] === currentBoard[grid + 1][cell]) return true;\n        }\n        return false;\n    }\n}\nvar $c900fb13af697397$export$2e2bcd8739ae039 = $c900fb13af697397$var$GameMovement;\n\n\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ #score = 0;\n    #board = [];\n    #isStartGame = false;\n    #controller = null;\n    constructor(initialState = (0, $0fcf5b2da988d5d1$export$25512e653c44f0a8)){\n        this.tbody = document.querySelector(\"table tbody\");\n        this.htmlScore = document.querySelector(\".game-score\");\n        this.messageLose = document.querySelector(\".message-lose\");\n        this.messageWin = document.querySelector(\".message-win\");\n        this.messageStart = document.querySelector(\".message-start\");\n        this.#board = initialState;\n        this.#score = 0;\n        this.#isStartGame = false;\n        this.#controller = null;\n    }\n    #mergeLeft(grid, cell) {\n        if (this.#board[grid][cell - 1] === this.#board[grid][cell]) {\n            this.#board[grid][cell - 1] = this.#board[grid][cell - 1] * 2;\n            this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            this.#score += this.#board[grid][cell - 1];\n        }\n    }\n    #mergeRight(grid, cell) {\n        if (this.#board[grid][cell] === this.#board[grid][cell + 1]) {\n            this.#board[grid][cell + 1] = this.#board[grid][cell + 1] * 2;\n            this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            this.#score += this.#board[grid][cell + 1];\n        }\n    }\n    #mergeDown(grid, cell) {\n        if (this.#board[grid][cell] === this.#board[grid + 1][cell]) {\n            this.#board[grid + 1][cell] = this.#board[grid + 1][cell] * 2;\n            this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            this.#score += this.#board[grid + 1][cell];\n        }\n    }\n    #mergeUp(grid, cell) {\n        if (this.#board[grid][cell] === this.#board[grid - 1][cell]) {\n            this.#board[grid - 1][cell] = this.#board[grid - 1][cell] * 2;\n            this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            this.#score += this.#board[grid - 1][cell];\n        }\n    }\n    #mergeByCell(grid, cell, direction) {\n        if (direction === (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).left) this.#mergeLeft(grid, cell);\n        if (direction === (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).right) this.#mergeRight(grid, cell);\n    }\n    #mergeByGrid(grid, cell, direction) {\n        if (direction === (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).down) this.#mergeDown(grid, cell);\n        if (direction === (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).up) this.#mergeUp(grid, cell);\n    }\n    moveLeft() {\n        for(let grid = this.#board.length - 1; grid >= 0; grid--)for(let cell = this.#board.length - 1; cell >= 0; cell--){\n            if (this.#board[grid][cell - 1] === (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e)) {\n                this.#board[grid][cell - 1] = this.#board[grid][cell];\n                this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            }\n            this.#mergeByCell(grid, cell, (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).left);\n        }\n        this.#getScore();\n        this.updateBoard(this.#board);\n    }\n    moveRight() {\n        for(let grid = 0; grid < this.#board.length; grid++)for(let cell = 0; cell < this.#board.length; cell++){\n            if (this.#board[grid][cell + 1] === (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e)) {\n                this.#board[grid][cell + 1] = this.#board[grid][cell];\n                this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            }\n            this.#mergeByCell(grid, cell, (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).right);\n        }\n        this.#getScore();\n        this.updateBoard(this.#board);\n    }\n    moveUp() {\n        for(let grid = this.#board.length - 1; grid >= 1; grid--)for(let cell = this.#board.length - 1; cell >= 0; cell--){\n            if (this.#board[grid - 1][cell] === (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e)) {\n                this.#board[grid - 1][cell] = this.#board[grid][cell];\n                this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            }\n            this.#mergeByGrid(grid, cell, (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).up);\n        }\n        this.#getScore();\n        this.updateBoard(this.#board);\n    }\n    moveDown() {\n        for(let grid = 0; grid < this.#board.length - 1; grid++)for(let cell = 0; cell < this.#board.length; cell++){\n            if (this.#board[grid + 1][cell] === (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e)) {\n                this.#board[grid + 1][cell] = this.#board[grid][cell];\n                this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n            }\n            this.#mergeByGrid(grid, cell, (0, $0fcf5b2da988d5d1$export$6333daccc0bdbd7c).down);\n        }\n        this.#getScore();\n        this.updateBoard(this.#board);\n    }\n    /**\n   * @returns {number}\n   */ #getScore() {\n        this.htmlScore.textContent = this.#score;\n    }\n    #resetScore() {\n        this.#score = 0;\n        this.#getScore();\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.#board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        const { isMoveLeft: isMoveLeft, isMoveRight: isMoveRight, isMoveDown: isMoveDown, isMoveUp: isMoveUp } = new (0, $c900fb13af697397$export$2e2bcd8739ae039)();\n        if (!this.#isStartGame) return (0, $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40).idle;\n        else if ((0, $5542fe962866e08d$export$28da6a8e130cf651)(this.#board) && !isMoveLeft(this.#board) && !isMoveRight(this.#board) && !isMoveUp(this.#board) && !isMoveDown(this.#board)) return (0, $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40).lose;\n        else if ((0, $5542fe962866e08d$export$e2f06fda9dc3fd04)(this.#board)) return (0, $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40).win;\n        else return (0, $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40).playing;\n    }\n    showStatus() {\n        const gameStatus = this.getStatus();\n        if (gameStatus === (0, $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40).win) {\n            this.#isStartGame = false;\n            this.messageWin.classList.remove(\"hidden\");\n        }\n        if (gameStatus === (0, $0fcf5b2da988d5d1$export$e8c05b13b4dd4b40).lose) {\n            this.#isStartGame = false;\n            this.messageLose.classList.remove(\"hidden\");\n        }\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.#isStartGame = true;\n        this.messageStart.classList.add(\"hidden\");\n        this.#controller = new (0, $df08e06b5ece57d3$export$2e2bcd8739ae039)(this);\n        this.createNewCell();\n        this.createNewCell();\n        this.updateBoard(this.#board);\n    }\n    createNewCell() {\n        const emptyCells = [];\n        for(let grid = 0; grid < this.#board.length; grid++){\n            for(let cell = 0; cell < this.#board.length; cell++)if (this.#board[grid][cell] === (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e)) emptyCells.push({\n                gridPos: grid,\n                cellPos: cell\n            });\n        }\n        const randomIndex = (0, $5542fe962866e08d$export$33e0efaee94597c9)(emptyCells.length);\n        const { gridPos: gridPos, cellPos: cellPos } = emptyCells[randomIndex];\n        this.#board[gridPos][cellPos] = (0, $5542fe962866e08d$export$36748765b520fa8d)() ? 4 : 2;\n    }\n    /**\n   * Resets the game.\n   */ #clearStatus() {\n        this.messageLose.classList.add(\"hidden\");\n        this.messageWin.classList.add(\"hidden\");\n    }\n    restart() {\n        this.#isStartGame = false;\n        this.messageStart.classList.remove(\"hidden\");\n        this.#resetScore();\n        this.#clearStatus();\n        this.#controller.removeController();\n        for(let grid = 0; grid < this.#board.length; grid++)for(let cell = 0; cell < this.#board.length; cell++)this.#board[grid][cell] = (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e);\n        this.updateBoard(this.#board);\n    }\n    updateBoard(currentBoard) {\n        this.tbody.innerHTML = \"\";\n        for(let grid = 0; grid < currentBoard.length; grid++){\n            const tr = (0, $764498523289c9f6$export$2e2bcd8739ae039)(\"field-row\");\n            for(let cell = 0; cell < currentBoard.length; cell++){\n                const td = (0, $6ecaa24ec68734a7$export$2e2bcd8739ae039)(\"field-cell\");\n                const value = currentBoard[grid][cell];\n                td.classList.add(\"field-cell\");\n                if (value > (0, $0fcf5b2da988d5d1$export$c21b640bfee1f50e)) {\n                    td.classList.add(`field-cell--${value}`);\n                    td.textContent = value;\n                }\n                tr.append(td);\n            }\n            this.tbody.append(tr);\n        }\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\n\nconst $1d5241309b985d29$var$toggleGameMode = (game, button)=>{\n    if (button.classList.contains((0, $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8).start)) {\n        game.start();\n        button.classList.remove((0, $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8).start);\n        button.classList.add((0, $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8).restart);\n        button.textContent = (0, $5542fe962866e08d$export$9a00dee1beb8f576)((0, $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8).restart);\n    } else {\n        button.classList.add((0, $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8).start);\n        button.classList.remove((0, $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8).restart);\n        button.textContent = (0, $5542fe962866e08d$export$9a00dee1beb8f576)((0, $0fcf5b2da988d5d1$export$2b91a396ffc4b6e8).start);\n        game.restart();\n    }\n};\nvar $1d5241309b985d29$export$2e2bcd8739ae039 = $1d5241309b985d29$var$toggleGameMode;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\n// Write your code here\nconst $09e991522ca7e64e$var$button = document.querySelector(\"button\");\nconst $09e991522ca7e64e$var$App = ()=>{\n    $09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n        (0, $1d5241309b985d29$export$2e2bcd8739ae039)($09e991522ca7e64e$var$game, $09e991522ca7e64e$var$button);\n    });\n};\n$09e991522ca7e64e$var$App();\n\n\n//# sourceMappingURL=index.9d21d22e.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n\nimport Game from '../modules/Game.class.js';\nimport toggleGameMode from './toggleGameMode.js';\n\nconst game = new Game();\n// Write your code here\nconst button = document.querySelector('button');\n\nconst App = () => {\n  button.addEventListener('click', () => {\n    toggleGameMode(game, button);\n  });\n};\n\nApp();\n","\"use strict\";\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nimport {\n  EMPTY_BOARD,\n  EMPTY_CELL,\n  GAME_STATUSES,\n  MERGE_DIRECTIONS,\n} from \"../constants.js\";\nimport TableColumn from \"../scripts/TableColumn.js\";\nimport TableRow from \"../scripts/TableRow.js\";\nimport {\n  generateRandomIndex,\n  isFilledBoard,\n  isWinGame,\n  rollDie,\n} from \"../utils.js\";\nimport GameController from \"./GameController.class.js\";\nimport GameMovement from \"./GameMovement.class.js\";\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  #score = 0;\n  #board = [];\n  #isStartGame = false;\n  #controller = null;\n\n  constructor(initialState = EMPTY_BOARD) {\n    this.tbody = document.querySelector(\"table tbody\");\n    this.htmlScore = document.querySelector(\".game-score\");\n    this.messageLose = document.querySelector(\".message-lose\");\n    this.messageWin = document.querySelector(\".message-win\");\n    this.messageStart = document.querySelector(\".message-start\");\n    this.#board = initialState;\n    this.#score = 0;\n    this.#isStartGame = false;\n    this.#controller = null;\n  }\n\n  #mergeLeft(grid, cell) {\n    if (this.#board[grid][cell - 1] === this.#board[grid][cell]) {\n      this.#board[grid][cell - 1] = this.#board[grid][cell - 1] * 2;\n      this.#board[grid][cell] = EMPTY_CELL;\n      this.#score += this.#board[grid][cell - 1];\n    }\n  }\n\n  #mergeRight(grid, cell) {\n    if (this.#board[grid][cell] === this.#board[grid][cell + 1]) {\n      this.#board[grid][cell + 1] = this.#board[grid][cell + 1] * 2;\n      this.#board[grid][cell] = EMPTY_CELL;\n      this.#score += this.#board[grid][cell + 1];\n    }\n  }\n\n  #mergeDown(grid, cell) {\n    if (this.#board[grid][cell] === this.#board[grid + 1][cell]) {\n      this.#board[grid + 1][cell] = this.#board[grid + 1][cell] * 2;\n      this.#board[grid][cell] = EMPTY_CELL;\n      this.#score += this.#board[grid + 1][cell];\n    }\n  }\n\n  #mergeUp(grid, cell) {\n    if (this.#board[grid][cell] === this.#board[grid - 1][cell]) {\n      this.#board[grid - 1][cell] = this.#board[grid - 1][cell] * 2;\n      this.#board[grid][cell] = EMPTY_CELL;\n      this.#score += this.#board[grid - 1][cell];\n    }\n  }\n\n  #mergeByCell(grid, cell, direction) {\n    if (direction === MERGE_DIRECTIONS.left) {\n      this.#mergeLeft(grid, cell);\n    }\n\n    if (direction === MERGE_DIRECTIONS.right) {\n      this.#mergeRight(grid, cell);\n    }\n  }\n\n  #mergeByGrid(grid, cell, direction) {\n    if (direction === MERGE_DIRECTIONS.down) {\n      this.#mergeDown(grid, cell);\n    }\n\n    if (direction === MERGE_DIRECTIONS.up) {\n      this.#mergeUp(grid, cell);\n    }\n  }\n\n  moveLeft() {\n    for (let grid = this.#board.length - 1; grid >= 0; grid--) {\n      for (let cell = this.#board.length - 1; cell >= 0; cell--) {\n        if (this.#board[grid][cell - 1] === EMPTY_CELL) {\n          this.#board[grid][cell - 1] = this.#board[grid][cell];\n          this.#board[grid][cell] = EMPTY_CELL;\n        }\n\n        this.#mergeByCell(grid, cell, MERGE_DIRECTIONS.left);\n      }\n    }\n\n    this.#getScore();\n    this.updateBoard(this.#board);\n  }\n\n  moveRight() {\n    for (let grid = 0; grid < this.#board.length; grid++) {\n      for (let cell = 0; cell < this.#board.length; cell++) {\n        if (this.#board[grid][cell + 1] === EMPTY_CELL) {\n          this.#board[grid][cell + 1] = this.#board[grid][cell];\n          this.#board[grid][cell] = EMPTY_CELL;\n        }\n\n        this.#mergeByCell(grid, cell, MERGE_DIRECTIONS.right);\n      }\n    }\n\n    this.#getScore();\n    this.updateBoard(this.#board);\n  }\n\n  moveUp() {\n    for (let grid = this.#board.length - 1; grid >= 1; grid--) {\n      for (let cell = this.#board.length - 1; cell >= 0; cell--) {\n        if (this.#board[grid - 1][cell] === EMPTY_CELL) {\n          this.#board[grid - 1][cell] = this.#board[grid][cell];\n          this.#board[grid][cell] = EMPTY_CELL;\n        }\n\n        this.#mergeByGrid(grid, cell, MERGE_DIRECTIONS.up);\n      }\n    }\n\n    this.#getScore();\n    this.updateBoard(this.#board);\n  }\n\n  moveDown() {\n    for (let grid = 0; grid < this.#board.length - 1; grid++) {\n      for (let cell = 0; cell < this.#board.length; cell++) {\n        if (this.#board[grid + 1][cell] === EMPTY_CELL) {\n          this.#board[grid + 1][cell] = this.#board[grid][cell];\n          this.#board[grid][cell] = EMPTY_CELL;\n        }\n\n        this.#mergeByGrid(grid, cell, MERGE_DIRECTIONS.down);\n      }\n    }\n\n    this.#getScore();\n    this.updateBoard(this.#board);\n  }\n\n  /**\n   * @returns {number}\n   */\n  #getScore() {\n    this.htmlScore.textContent = this.#score;\n  }\n\n  #resetScore() {\n    this.#score = 0;\n    this.#getScore();\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.#board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n\n  getStatus() {\n    const { isMoveLeft, isMoveRight, isMoveDown, isMoveUp } =\n      new GameMovement();\n\n    if (!this.#isStartGame) {\n      return GAME_STATUSES.idle;\n    } else if (\n      isFilledBoard(this.#board) &&\n      !isMoveLeft(this.#board) &&\n      !isMoveRight(this.#board) &&\n      !isMoveUp(this.#board) &&\n      !isMoveDown(this.#board)\n    ) {\n      return GAME_STATUSES.lose;\n    } else if (isWinGame(this.#board)) {\n      return GAME_STATUSES.win;\n    } else {\n      return GAME_STATUSES.playing;\n    }\n  }\n\n  showStatus() {\n    const gameStatus = this.getStatus();\n\n    if (gameStatus === GAME_STATUSES.win) {\n      this.#isStartGame = false;\n      this.messageWin.classList.remove(\"hidden\");\n    }\n\n    if (gameStatus === GAME_STATUSES.lose) {\n      this.#isStartGame = false;\n      this.messageLose.classList.remove(\"hidden\");\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n\n  start() {\n    this.#isStartGame = true;\n    this.messageStart.classList.add(\"hidden\");\n    this.#controller = new GameController(this);\n\n    this.createNewCell();\n    this.createNewCell();\n\n    this.updateBoard(this.#board);\n  }\n\n  createNewCell() {\n    const emptyCells = [];\n\n    for (let grid = 0; grid < this.#board.length; grid++) {\n      for (let cell = 0; cell < this.#board.length; cell++) {\n        if (this.#board[grid][cell] === EMPTY_CELL) {\n          emptyCells.push({\n            gridPos: grid,\n            cellPos: cell,\n          });\n        }\n      }\n    }\n\n    const randomIndex = generateRandomIndex(emptyCells.length);\n    const { gridPos, cellPos } = emptyCells[randomIndex];\n    this.#board[gridPos][cellPos] = rollDie() ? 4 : 2;\n  }\n  /**\n   * Resets the game.\n   */\n  #clearStatus() {\n    this.messageLose.classList.add(\"hidden\");\n    this.messageWin.classList.add(\"hidden\");\n  }\n\n  restart() {\n    this.#isStartGame = false;\n    this.messageStart.classList.remove(\"hidden\");\n\n    this.#resetScore();\n    this.#clearStatus();\n\n    this.#controller.removeController();\n\n    for (let grid = 0; grid < this.#board.length; grid++) {\n      for (let cell = 0; cell < this.#board.length; cell++) {\n        this.#board[grid][cell] = EMPTY_CELL;\n      }\n    }\n\n    this.updateBoard(this.#board);\n  }\n\n  updateBoard(currentBoard) {\n    this.tbody.innerHTML = \"\";\n\n    for (let grid = 0; grid < currentBoard.length; grid++) {\n      const tr = TableRow(\"field-row\");\n\n      for (let cell = 0; cell < currentBoard.length; cell++) {\n        const td = TableColumn(\"field-cell\");\n        const value = currentBoard[grid][cell];\n\n        td.classList.add(\"field-cell\");\n\n        if (value > EMPTY_CELL) {\n          td.classList.add(`field-cell--${value}`);\n          td.textContent = value;\n        }\n\n        tr.append(td);\n      }\n\n      this.tbody.append(tr);\n    }\n  }\n}\n\nexport default Game;\n","export const TARGET_SCORE = 2048;\nexport const EMPTY_CELL = 0;\n\nexport const EMPTY_BOARD = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nexport const MERGE_DIRECTIONS = {\n  left: 'left',\n  right: 'right',\n  up: 'up',\n  down: 'down',\n};\n\nexport const TYPES_MODE = {\n  start: 'start',\n  restart: 'restart',\n};\n\nexport const GAME_STATUSES = {\n  idle: 'idle',\n  playing: 'playing',\n  win: 'win',\n  lose: 'lose',\n};\n\nexport const DIRECTION_KEYS = {\n  up: 'ArrowUp',\n  down: 'ArrowDown',\n  left: 'ArrowLeft',\n  right: 'ArrowRight',\n};\n\nexport const GRID_LENGTH = 4;\n","const TableColumn = (className) => {\n  const td = document.createElement('td');\n\n  td.classList.add(className);\n\n  return td;\n};\n\nexport default TableColumn;\n","const TableRow = (className) => {\n  const tr = document.createElement('tr');\n\n  tr.classList.add(className);\n\n  return tr;\n};\n\nexport default TableRow;\n","/* eslint-disable no-param-reassign */\nimport { EMPTY_CELL, TARGET_SCORE } from './constants';\n\nexport const generateRandomIndex = (maxNumber) => {\n  return Math.floor(Math.random() * maxNumber);\n};\n\nexport const capitalize = (str) => {\n  return str[0].toUpperCase() + str.slice(1);\n};\n\nexport const rollDie = () => {\n  const result = Math.floor(Math.random() * 10) + 1;\n\n  return result === 1;\n};\n\nexport const isFilledBoard = (board) => {\n  return board.every((row) => row.every((cell) => cell !== EMPTY_CELL));\n};\n\nexport const isWinGame = (board) => {\n  return board.some((row) => row.some((cell) => cell === TARGET_SCORE));\n};\n","import { DIRECTION_KEYS, GAME_STATUSES } from \"../constants\";\n\nclass GameController {\n  constructor(game) {\n    this.game = game;\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.setController();\n  }\n\n  setController() {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  removeController() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleKeyDown(e) {\n    if (this.game.getStatus() === GAME_STATUSES.idle) {\n      return;\n    }\n\n    const oldBoard = JSON.stringify(this.game.getState());\n\n    this.game.showStatus();\n\n    switch (e.key) {\n      case DIRECTION_KEYS.up:\n        this.game.moveUp();\n        break;\n      case DIRECTION_KEYS.down:\n        this.game.moveDown();\n        break;\n      case DIRECTION_KEYS.left:\n        this.game.moveLeft();\n        break;\n      case DIRECTION_KEYS.right:\n        this.game.moveRight();\n        break;\n    }\n\n    const newBoard = JSON.stringify(this.game.getState());\n\n    if (newBoard !== oldBoard) {\n      this.game.createNewCell();\n      this.game.updateBoard(this.game.getState());\n    }\n  }\n}\n\nexport default GameController;\n","class GameMovement {\n  isMoveLeft(currentBoard) {\n    for (let grid = currentBoard.length - 1; grid >= 0; grid--) {\n      for (let cell = currentBoard.length - 1; cell >= 0; cell--) {\n        if (currentBoard[grid][cell - 1] === currentBoard[grid][cell]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isMoveRight(currentBoard) {\n    for (let grid = 0; grid < currentBoard.length; grid++) {\n      for (let cell = 0; cell < currentBoard.length; cell++) {\n        if (currentBoard[grid][cell] === currentBoard[grid][cell + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isMoveUp(currentBoard) {\n    for (let grid = currentBoard.length - 1; grid >= 1; grid--) {\n      for (let cell = currentBoard.length - 1; cell >= 0; cell--) {\n        if (currentBoard[grid][cell] === currentBoard[grid - 1][cell]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isMoveDown(currentBoard) {\n    for (let grid = 0; grid < currentBoard.length - 1; grid++) {\n      for (let cell = 0; cell < currentBoard.length; cell++) {\n        if (currentBoard[grid][cell] === currentBoard[grid + 1][cell]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nexport default GameMovement;\n","import { TYPES_MODE } from \"../constants\";\nimport { capitalize } from \"../utils\";\n\nconst toggleGameMode = (game, button) => {\n  if (button.classList.contains(TYPES_MODE.start)) {\n    game.start();\n    button.classList.remove(TYPES_MODE.start);\n    button.classList.add(TYPES_MODE.restart);\n    button.textContent = capitalize(TYPES_MODE.restart);\n  } else {\n    button.classList.add(TYPES_MODE.start);\n    button.classList.remove(TYPES_MODE.restart);\n    button.textContent = capitalize(TYPES_MODE.start);\n    game.restart();\n  }\n};\n\nexport default toggleGameMode;\n"],"names":["$0fcf5b2da988d5d1$export$25512e653c44f0a8","$0fcf5b2da988d5d1$export$6333daccc0bdbd7c","left","right","up","down","$0fcf5b2da988d5d1$export$2b91a396ffc4b6e8","start","restart","$0fcf5b2da988d5d1$export$e8c05b13b4dd4b40","idle","playing","win","lose","$0fcf5b2da988d5d1$export$7a24a077d7a1fcef","$6ecaa24ec68734a7$export$2e2bcd8739ae039","className","td","document","createElement","classList","add","$764498523289c9f6$export$2e2bcd8739ae039","tr","$5542fe962866e08d$export$33e0efaee94597c9","maxNumber","Math","floor","random","$5542fe962866e08d$export$9a00dee1beb8f576","str","toUpperCase","slice","$5542fe962866e08d$export$36748765b520fa8d","result","$5542fe962866e08d$export$28da6a8e130cf651","board","every","row","cell","$5542fe962866e08d$export$e2f06fda9dc3fd04","some","$df08e06b5ece57d3$export$2e2bcd8739ae039","constructor","game","handleKeyDown","bind","setController","addEventListener","removeController","removeEventListener","e","getStatus","oldBoard","JSON","stringify","getState","showStatus","key","moveUp","moveDown","moveLeft","moveRight","createNewCell","updateBoard","$c900fb13af697397$export$2e2bcd8739ae039","isMoveLeft","currentBoard","grid","length","isMoveRight","isMoveUp","isMoveDown","$a5fd07fa01589658$export$2e2bcd8739ae039","initialState","tbody","querySelector","htmlScore","messageLose","messageWin","messageStart","direction","textContent","gameStatus","remove","emptyCells","push","gridPos","cellPos","randomIndex","innerHTML","value","append","$1d5241309b985d29$export$2e2bcd8739ae039","button","contains","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button"],"version":3,"file":"index.9d21d22e.js.map"}